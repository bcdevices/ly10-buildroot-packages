From 01e76130c4f5929236757f6107445637b79948db Mon Sep 17 00:00:00 2001
From: Jeremy Wood <jeremy@bcdevices.com>
Date: Wed, 22 Sep 2021 17:47:06 -0700
Subject: [PATCH] Improvements to atsame5 security handling.

* Add atsame5 chip-erase-secured, atsame5 set-security.
* ftdi_init_samd_cold_plug
* cmsis_dap_init_samd_cold_plug
---
 src/flash/nor/atsame5.c      | 66 ++++++++++++++++++++++++++++++++++++
 src/jtag/drivers/cmsis_dap.c | 27 +++++++++++++++
 src/jtag/drivers/ftdi.c      | 65 ++++++++++++++++++++++++++++++++++-
 3 files changed, 157 insertions(+), 1 deletion(-)

diff --git a/src/flash/nor/atsame5.c b/src/flash/nor/atsame5.c
index ed0bef463..70e9c81b3 100644
--- a/src/flash/nor/atsame5.c
+++ b/src/flash/nor/atsame5.c
@@ -782,6 +782,27 @@ COMMAND_HANDLER(same5_handle_chip_erase_command)
 }
 
 
+COMMAND_HANDLER(same5_handle_chip_erase_secured_command)
+{
+	struct target *target = get_current_target(CMD_CTX);
+	if (!target)
+		return ERROR_FAIL;
+
+	/* Note: Not writing to SAME5_PAC here, causes errors and not necessary on
+	 * secured chip. */
+	 
+	/* Tell the DSU to perform a full chip erase.  It takes about 240ms to
+	 * perform the erase. */
+	int res = target_write_u8(target, SAMD_DSU + SAMD_DSU_CTRL_EXT, (1<<4));
+	if (res == ERROR_OK)
+		command_print(CMD, "chip erase started");
+	else
+		command_print(CMD, "write to DSU CTRL failed");
+
+	return res;
+}
+
+
 COMMAND_HANDLER(same5_handle_userpage_command)
 {
 	int res = ERROR_OK;
@@ -826,6 +847,33 @@ COMMAND_HANDLER(same5_handle_userpage_command)
 		return res2;
 }
 
+COMMAND_HANDLER(same5_handle_set_security_command)
+{
+	int res = ERROR_OK;
+	struct target *target = get_current_target(CMD_CTX);
+
+	if (CMD_ARGC < 1 || (CMD_ARGC >= 1 && (strcmp(CMD_ARGV[0], "enable")))) {
+		command_print(CMD, "supply the \"enable\" argument to proceed.");
+		return ERROR_COMMAND_SYNTAX_ERROR;
+	}
+
+	if (target) {
+		if (target->state != TARGET_HALTED) {
+			LOG_ERROR("Target not halted");
+			return ERROR_TARGET_NOT_HALTED;
+		}
+
+		res = same5_issue_nvmctrl_command(target, SAME5_NVM_CMD_SSB);
+
+		/* Check (and clear) error conditions */
+		if (res == ERROR_OK)
+			command_print(CMD, "chip secured on next power-cycle");
+		else
+			command_print(CMD, "failed to secure chip");
+	}
+
+	return res;
+}
 
 COMMAND_HANDLER(same5_handle_bootloader_command)
 {
@@ -915,6 +963,14 @@ static const struct command_registration same5_exec_command_handlers[] = {
 		.help = "Erase the entire Flash by using the Chip-"
 			"Erase feature in the Device Service Unit (DSU).",
 	},
+	{
+		.name = "chip-erase-secured",
+		.usage = "",
+		.handler = same5_handle_chip_erase_secured_command,
+		.mode = COMMAND_EXEC,
+		.help = "Clear security bit by bulk-erasing. Uses the Chip-"
+			"Erase feature in the Device Service Unit (DSU).",
+	},
 	{
 		.name = "bootloader",
 		.usage = "[size_in_bytes]",
@@ -935,6 +991,16 @@ static const struct command_registration same5_exec_command_handlers[] = {
 			"For security reasons the reserved-bits are masked out "
 			"in background and therefore cannot be changed.",
 	},
+	{
+		.name = "set-security",
+		.handler = same5_handle_set_security_command,
+		.usage = "'enable'",
+		.mode = COMMAND_EXEC,
+		.help = "Secure the chip's Flash by setting the Security Bit."
+			"This makes it impossible to read the Flash contents."
+			"The only way to undo this is to issue the "
+			"chip-erase-secured command.",
+	},
 	COMMAND_REGISTRATION_DONE
 };
 
diff --git a/src/jtag/drivers/cmsis_dap.c b/src/jtag/drivers/cmsis_dap.c
index 16480ae1e..12e221222 100644
--- a/src/jtag/drivers/cmsis_dap.c
+++ b/src/jtag/drivers/cmsis_dap.c
@@ -224,6 +224,7 @@ static uint8_t output_pins = SWJ_PIN_SRST | SWJ_PIN_TRST;
 
 static struct cmsis_dap *cmsis_dap_handle;
 
+static bool samd_cold_plug;
 
 static int cmsis_dap_open(void)
 {
@@ -1022,6 +1023,18 @@ static int cmsis_dap_init(void)
 	}
 	LOG_INFO("CMSIS-DAP: Interface ready");
 
+	if (samd_cold_plug) {
+		retval = cmsis_dap_cmd_DAP_SWJ_Pins(0, SWJ_PIN_SRST | SWJ_PIN_TCK, 100, NULL);
+		if (retval != ERROR_OK)
+			return ERROR_FAIL;
+
+		retval = cmsis_dap_cmd_DAP_SWJ_Pins(SWJ_PIN_SRST, SWJ_PIN_SRST | SWJ_PIN_TCK, 100, NULL);
+		if (retval != ERROR_OK)
+			return ERROR_FAIL;
+
+		LOG_INFO("SAMD reset cold-plug sequence issued, device is held in reset.");
+	}
+
 	return ERROR_OK;
 }
 
@@ -1661,6 +1674,12 @@ COMMAND_HANDLER(cmsis_dap_handle_backend_command)
 	return ERROR_OK;
 }
 
+COMMAND_HANDLER(cmsis_dap_handle_samd_cold_plug_command)
+{
+	samd_cold_plug = true;
+	return ERROR_OK;
+}
+
 static const struct command_registration cmsis_dap_subcommand_handlers[] = {
 	{
 		.name = "info",
@@ -1709,6 +1728,14 @@ static const struct command_registration cmsis_dap_command_handlers[] = {
 		.help = "set the communication backend to use (USB bulk or HID).",
 		.usage = "(auto | usb_bulk | hid)",
 	},
+	{
+		.name = "cmsis_dap_init_samd_cold_plug",
+		.handler = &cmsis_dap_handle_samd_cold_plug_command,
+		.mode = COMMAND_CONFIG,
+		.help = "Issues SAMD/R/L/C cold-plug sequence during init to "
+			"attach to a secured device.",
+		.usage = "",
+	},
 #if BUILD_CMSIS_DAP_USB
 	{
 		.name = "cmsis_dap_usb",
diff --git a/src/jtag/drivers/ftdi.c b/src/jtag/drivers/ftdi.c
index 9e47d3cad..78441e89a 100644
--- a/src/jtag/drivers/ftdi.c
+++ b/src/jtag/drivers/ftdi.c
@@ -131,6 +131,8 @@ static uint16_t direction;
 static uint16_t jtag_output_init;
 static uint16_t jtag_direction_init;
 
+static bool samd_cold_plug;
+
 static int ftdi_swd_switch_seq(enum swd_special_seq seq);
 
 static struct signal *find_signal_by_name(const char *name)
@@ -644,6 +646,8 @@ static int ftdi_execute_queue(void)
 
 static int ftdi_initialize(void)
 {
+	int retval;
+
 	if (tap_get_tms_path_len(TAP_IRPAUSE, TAP_IRPAUSE) == 7)
 		LOG_DEBUG("ftdi interface using 7 step jtag state transitions");
 	else
@@ -685,7 +689,52 @@ static int ftdi_initialize(void)
 
 	freq = mpsse_set_frequency(mpsse_ctx, jtag_get_speed_khz() * 1000);
 
-	return mpsse_flush(mpsse_ctx);
+	retval = mpsse_flush(mpsse_ctx);
+	if (retval != ERROR_OK) {
+		LOG_ERROR("Flush error before reset");
+		return retval;
+	}
+
+	if (samd_cold_plug) {
+		struct signal *sig_nsrst = find_signal_by_name("nSRST");
+		struct signal *sig_clk = find_signal_by_name("SWD_CLK");
+
+		/* Hold nSRST for 50ms */
+		retval = ftdi_set_signal(sig_nsrst, '1');
+		if (retval != ERROR_OK) {
+			return retval;
+		}
+		retval = mpsse_flush(mpsse_ctx);
+		if (retval != ERROR_OK) {
+			return retval;
+		}
+		usleep(50000);
+
+		/* Take nSRST for 3ms. */
+		retval = ftdi_set_signal(sig_nsrst, '0');
+		if (retval != ERROR_OK) {
+			return retval;
+		}
+		retval = mpsse_flush(mpsse_ctx);
+		if (retval != ERROR_OK) {
+			return retval;
+		}
+		usleep(3000);
+
+		/* Put nSRST high. */
+		retval = ftdi_set_signal(sig_nsrst, '1');
+		if (retval != ERROR_OK) {
+			return retval;
+		}
+		retval = mpsse_flush(mpsse_ctx);
+		if (retval != ERROR_OK) {
+			return retval;
+		}
+
+		LOG_INFO("SAMD reset cold-plug sequence issued, device is held in reset. v4");
+	}
+
+	return retval;
 }
 
 static int ftdi_quit(void)
@@ -931,6 +980,12 @@ COMMAND_HANDLER(ftdi_handle_tdo_sample_edge_command)
 	return ERROR_OK;
 }
 
+COMMAND_HANDLER(ftdi_handle_samd_cold_plug_command)
+{
+	samd_cold_plug = true;
+	return ERROR_OK;
+}
+
 static const struct command_registration ftdi_command_handlers[] = {
 	{
 		.name = "ftdi_device_desc",
@@ -999,6 +1054,14 @@ static const struct command_registration ftdi_command_handlers[] = {
 			"allow signalling speed increase)",
 		.usage = "(rising|falling)",
 	},
+	{
+		.name = "ftdi_init_samd_cold_plug",
+		.handler = &ftdi_handle_samd_cold_plug_command,
+		.mode = COMMAND_CONFIG,
+		.help = "Issues SAMD/R/L/C cold-plug sequence during init to "
+			"attach to a secured device.",
+		.usage = "",
+	},
 	COMMAND_REGISTRATION_DONE
 };
 
-- 
2.24.3 (Apple Git-128)

